package edu.uw.tcss450.team8tcss450.ui.chat;

import android.app.Application;
import android.util.Log;

import com.android.volley.DefaultRetryPolicy;
import com.android.volley.Request;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.IntFunction;

import androidx.annotation.NonNull;
import androidx.lifecycle.AndroidViewModel;
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.Observer;
import edu.uw.tcss450.team8tcss450.R;
import edu.uw.tcss450.team8tcss450.ui.chat.test.ChatTestMessage;

/**
 * Modified from Charles Bryan's lab assignment for the course TCSS 450.
 *
 * View Model Class to support the Chat Fragment class. Handles server access features and GET/POST
 * functions.
 * TODO update to live server, include catches for live updates from services
 *
 * @author Charles Bryan
 * @version
 * @author Marc Perez
 * @version 6 May 2021
 */
public class ChatListViewModel extends AndroidViewModel {
    /**
     * Temporary string filler. Generated using BaconIpsum.com
     *  TODO DELETE LATER
     */
    private final String mTempMessage2 = "<Most Recent Chat Here>";
    private final String mTempMessage = "Bacon ipsum dolor amet short ribs meatloaf chuck chislic capicola. Pork belly turkey ham spare ribs frankfurter brisket ball tip, pork loin flank drumstick turducken capicola andouille tenderloin beef ribs. Short loin kielbasa picanha tail pancetta. Chicken chislic pork chop landjaeger brisket beef ribs burgdoggen boudin andouille meatball pancetta. Meatloaf beef ribs pig, leberkas bacon burgdoggen beef shoulder t-bone short ribs kielbasa turkey cow spare ribs ball tip.\n" +
            System.getProperty("line.separator") +
            "    Ham pastrami pork chop picanha. Spare ribs salami cupim alcatra, flank tail jerky pig swine filet mignon ball tip buffalo sausage venison pork chop. Flank buffalo cupim, filet mignon tri-tip turkey sirloin ham hock frankfurter spare ribs pig beef ribs. Pancetta sausage meatloaf, brisket tongue chislic salami jowl kielbasa porchetta andouille. Shank t-bone pork belly brisket pork chop. Ball tip flank shankle andouille, alcatra spare ribs turducken kielbasa picanha meatball shank boudin landjaeger. Landjaeger bresaola swine pork kevin pig prosciutto.";
    /**
     * List of Conversation objects held by the recycler view.
     */
    private MutableLiveData<List<ChatConversation>> mChatList;

    /**
     * List of Conversation objects held by the recycler view.
     */
    private MutableLiveData<List<String>> myEmailList;




    /**
     * public constructor.
     * @param application Application data object.
     */
    public ChatListViewModel(@NonNull Application application) {
        super(application);
        mChatList = new MutableLiveData<>();
        mChatList.setValue(new ArrayList<>());

        myEmailList = new MutableLiveData<>();
        myEmailList.setValue(new ArrayList<>());


    }





    /**
     * TODO fill in this javadoc
     * @param owner
     * @param observer
     */
    public void addChatListObserver(@NonNull LifecycleOwner owner,
                                    @NonNull Observer<? super List<ChatConversation>> observer) {
        mChatList.observe(owner, observer);
    }

    /**
     * TODO fill in this javadoc
     * @param owner
     * @param observer
     */
    public void addEmailListObserver(@NonNull LifecycleOwner owner,
                                    @NonNull Observer<? super List<String>> observer) {
        myEmailList.observe(owner, observer);
    }

    /**
     * Volley function to receive and handle error responses from the server.
     * TODO Currently bypasses errors, update when live data is valid.
     * @param error Error object generated by Volley.
     */
    private void handleError(final VolleyError error) {
        //Log.e("CONNECTION ERROR", error.getLocalizedMessage());
        //throw new IllegalStateException(error.getMessage());      // TODO fix when server is set up
        handleResult(null);
    }

    /**
     * Received and interprets data sent from Volley.
     * TODO this is hard coded for the 4 chat rooms. Assigns chat room based on email string. In the future use a new endpoint. Original Handle result down below
     * @param theResult A JSONObject generated by Volley with valid data.
     */
    private void handleResult(final JSONObject theResult) {
        //mChatList.setValue(new ArrayList<>());
        String temp = "";
        int currentChatID = 1;
        try {

            JSONArray messages = theResult.getJSONArray("rows");
            for(int i = 0; i < messages.length(); i++) {
                JSONObject message = messages.getJSONObject(i);
                String email = message.getString("email");
                myEmailList.getValue().add(email);
                temp += email + " ";
            }

            //See the above TODO
            int size = messages.length();
            if (size > 2) {
                currentChatID = 1;
            } else if (size == 2) {
                if (temp.contains("test@test.edu") && temp.contains("test1@test.edu")) {
                    currentChatID = 2;
                } else if (temp.contains("test@test.edu") && temp.contains("test2@test.edu")) {
                    currentChatID = 3;
                } else if (temp.contains("test@test.edu") && temp.contains("test3@test.edu")) {
                    currentChatID = 4;
                }
            }

        }catch (JSONException e) {
            Log.e("JSON PARSE ERROR", "Found in handle Success ChatViewModel");
            Log.e("JSON PARSE ERROR", "Error: " + e.getMessage());
        }
            //create post to add to a list of post. (Listener registered in ChatFragment)
            ChatConversation post = new edu.uw.tcss450.team8tcss450.ui.chat.ChatConversation.Builder(
                    temp, mTempMessage2, currentChatID)

                    .build();


            if (!mChatList.getValue().contains(post)) {
                mChatList.getValue().add(post);
            }
       // }
        mChatList.setValue(mChatList.getValue());
    }

    /**
     * Sends a GET to the server requesting conversation data.
     * TODO this is hard coded for the 4 chat rooms. In the future this will require broader implementation. Original down below.
     * @param theJwt a verified jwt object.
     * @param theChatID id to specify chat room.
     */
    public void connectGet(String theJwt, int theChatID) {

        String url =
                "https://team8-tcss450-app.herokuapp.com/chats/" + theChatID;    // TODO change to live data source
        Request request = new JsonObjectRequest(
                Request.Method.GET,
                url,
                null, //no body for this get request
                this::handleResult,
                this::handleError) {
            @Override
            public Map<String, String> getHeaders() {
                Map<String, String> headers = new HashMap<>();
                // add headers <key,value>
                headers.put("Authorization", theJwt);
                return headers;
            }
        };
        request.setRetryPolicy(new DefaultRetryPolicy(
                10_000,
                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
//Instantiate the RequestQueue and add the request to the queue
        Volley.newRequestQueue(getApplication().getApplicationContext())
                .add(request);
    }
}


//    /**
//     * Received and interprets data sent from Volley.
//     * TODO Currently generates dummy data, update when live data is valid.
//     * @param result A JSONObject generated by Volley with valid data.
//     */
//    private void handleResult(final JSONObject result) {
//        mChatList.setValue(new ArrayList<>());
//        for(int i = 0; i < 4; i++) {    // TODO remove when live data is implemented
//            edu.uw.tcss450.team8tcss450.ui.chat.ChatConversation post = new edu.uw.tcss450.team8tcss450.ui.chat.ChatConversation.Builder(
//                    "My Dearest Friend #" + (i + 1), mTempMessage)
//                    //.addMessage(System.getProperty("line.separator") + "Here's the second part of the message!")  // TODO change to message object pt. 2
//                    .build();
//            if (!mChatList.getValue().contains(post)) {
//                mChatList.getValue().add(post);
//            }
//        }
//        mChatList.setValue(mChatList.getValue());
//    }
//
//    /**
//     * Sends a GET to the server requesting conversation data.
//     * TODO add contactID to request, update link to a valid URL.
//     * @param jwt a verified jwt object.
//     */
//    public void connectGet(String jwt) {
//        String url =
//                "https://team8-tcss450-app.herokuapp.com/auth";    // TODO change to live data source
//        Request request = new JsonObjectRequest(
//                Request.Method.GET,
//                url,
//                null, //no body for this get request
//                this::handleResult,
//                this::handleError) {
//            @Override
//            public Map<String, String> getHeaders() {
//                Map<String, String> headers = new HashMap<>();
//                // add headers <key,value>
//                headers.put("Authorization", jwt);
//                return headers;
//            }
//        };
//        request.setRetryPolicy(new DefaultRetryPolicy(
//                10_000,
//                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
//                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT));
////Instantiate the RequestQueue and add the request to the queue
//        Volley.newRequestQueue(getApplication().getApplicationContext())
//                .add(request);
//}